# üì¶ –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import os
import json
import csv
import logging
import hashlib
from datetime import datetime
from fastapi import FastAPI, Response, Request
from aiogram import Bot
import asyncio

# üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –∏ –ª–æ–≥–æ–≤
app = FastAPI()
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")

# üìÅ –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
HISTORY_FILE = "history.json"
CSV_FILE = "history.csv"

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∫–ª—é—á–∏ Telegram)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_telegram(message: str):
    if not TELEGRAM_TOKEN or not CHAT_ID:
        logging.warning("‚ùå TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return
    bot = Bot(token=TELEGRAM_TOKEN)
    await bot.send_message(chat_id=CHAT_ID, text=message)

# üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–¥–¥–µ–ª–∫–∏
def hash_deal(deal: dict) -> str:
    raw = json.dumps(deal, sort_keys=True)
    return hashlib.sha256(raw.encode()).hexdigest()

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏
def save_to_history(data: dict):
    try:
        if os.path.exists(HISTORY_FILE):
            with open(HISTORY_FILE, "r") as f:
                history = json.load(f)
        else:
            history = []
        history.append(data)
        with open(HISTORY_FILE, "w") as f:
            json.dump(history, f, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# üìà –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è Iron Condor
async def run_iron_condor():
    # –ü—Ä–∏–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–¥–µ–ª–∫–∏
    spot = 3962.11
    expiry = "26.10.2025"
    legs = ["ETH-USD-251026-3850-P", "ETH-USD-251026-3900-P", "ETH-USD-251026-4000-C", "ETH-USD-251026-4050-C"]
    premium = 0.01
    max_loss = 99.99
    max_profit = 0.01

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = (
        f"‚úÖ –û—Ç–∫—Ä—ã—Ç–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Iron Condor\n"
        f"–°–ø–æ—Ç: {spot}\n"
        f"–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: {expiry}\n"
        f"–ü—Ä–µ–º–∏—è: {premium}\n"
        f"–†–∏—Å–∫: {max_loss}\n"
        f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {max_profit}\n"
        f"–°—Ç—Ä–∞–π–∫–∏: {legs}"
    )

    logging.info("üìà –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
    logging.info(message)

    await send_telegram(message)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    deal = {
        "timestamp": datetime.utcnow().isoformat(),
        "spot": spot,
        "expiry": expiry,
        "legs": legs,
        "premium": premium,
        "risk": max_loss,
        "potential": max_profit,
        "status": "open"
    }

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ—à–∞
    deal["hash"] = hash_deal(deal)

    save_to_history(deal)
    return deal

# üîó –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
@app.get("/")
async def run():
    return await run_iron_condor()

# üìú –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
@app.get("/history")
def get_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r") as f:
            return json.load(f)
    return []

# üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
@app.get("/metrics")
def get_metrics():
    if not os.path.exists(HISTORY_FILE):
        return {"total": 0, "average_premium": 0, "average_risk": 0}
    with open(HISTORY_FILE, "r") as f:
        history = json.load(f)
    total = len(history)
    avg_premium = sum(d["premium"] for d in history) / total
    avg_risk = sum(d["risk"] for d in history) / total
    return {
        "total": total,
        "average_premium": round(avg_premium, 4),
        "average_risk": round(avg_risk, 2)
    }

# üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ CSV
@app.get("/export")
def export_csv():
    if not os.path.exists(HISTORY_FILE):
        return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"}
    with open(HISTORY_FILE, "r") as f:
        history = json.load(f)
    with open(CSV_FILE, "w", newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["timestamp", "spot", "expiry", "legs", "premium", "risk", "potential", "status", "result", "hash"])
        for d in history:
            writer.writerow([
                d["timestamp"], d["spot"], d["expiry"], ",".join(d["legs"]),
                d["premium"], d["risk"], d["potential"], d["status"],
                d.get("result", ""), d.get("hash", "")
            ])
    with open(CSV_FILE, "r") as f:
        return Response(content=f.read(), media_type="text/csv")

# üìã –í–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
@app.get("/report")
def get_report(request: Request):
    params = request.query_params
    start = params.get("start")
    end = params.get("end")
    status = params.get("status")

    if not os.path.exists(HISTORY_FILE):
        return Response(content="<h2>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</h2>", media_type="text/html")
    with open(HISTORY_FILE, "r") as f:
        history = json.load(f)

    filtered = []
    for d in history:
        if status and d["status"] != status:
            continue
        if start and d["timestamp"] < start:
            continue
        if end and d["timestamp"] > end:
            continue
        filtered.append(d)

    html = "<h2>–û—Ç—á—ë—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º</h2><table border='1'><tr><th>ID</th><th>–î–∞—Ç–∞</th><th>–°–ø–æ—Ç</th><th>–ü—Ä–µ–º–∏—è</th><th>–†–∏—Å–∫</th><th>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª</th><th>–°—Ç–∞—Ç—É—Å</th><th>–†–µ–∑—É–ª—å—Ç–∞—Ç</th></tr>"
    for i, d in enumerate(filtered):
        html += f"<tr><td>{i}</td><td>{d['timestamp']}</td><td>{d['spot']}</td><td>{d['premium']}</td><td>{d['risk']}</td><td>{d['potential']}</td><td>{d['status']}</td><td>{d.get('result','')}</td></tr>"
    html += "</table>"
    return Response(content=html, media_type="text/html")

# ‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
@app.post("/close")
def close_position(id: int, result: str):
    if not os.path.exists(HISTORY_FILE):
        return {"error": "–ò—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
    with open(HISTORY_FILE, "r") as f:
        history = json.load(f)
    if id >= len(history):
        return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π ID"}
    history[id]["status"] = "closed"
    history[id]["result"] = result
    history[id]["closed_at"] = datetime.utcnow().isoformat()
    with open(HISTORY_FILE, "w") as f:
        json.dump(history, f, indent=2)
    return {"message": f"–°–¥–µ–ª–∫–∞ {id} –∑–∞–∫—Ä—ã—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {result}"}

# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏—Ç–∞ –≤ Telegram
async def send_audit():
    if not os.path.exists(HISTORY_FILE):
        return
    with open(HISTORY_FILE, "r") as f:
        history = json.load(f)
    total = len(history)
    closed = sum(1 for d in history if d["status"] == "closed")
    profit = sum(1 for d in history if d.get("result") == "profit")
    loss = sum(1 for d in history if d.get("result") == "loss")
    message = (
        f"üìä –ê—É–¥–∏—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:\n"
        f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total}\n"
        f"–ó–∞–∫—Ä—ã—Ç–æ: {closed}\n"
        f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profit}\n"
        f"–£–±—ã—Ç–æ—á–Ω—ã—Ö: {loss}"
    )
    await send_telegram(message)
